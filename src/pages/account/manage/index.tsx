import { useUser } from "@clerk/nextjs";
import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
// import { useRouter } from "next/router";
import React from "react";
import { useForm, type SubmitHandler } from "react-hook-form";
import { toast } from "react-hot-toast";
import { MdNavigateNext } from "react-icons/md";
import { LoadingPage } from "~/components/loading";
import { Navbar } from "~/components/navbar";

type Inputs = {
  displayName: string;
};

const Input = React.forwardRef<
  HTMLInputElement,
  {
    errorText?: string;
    onPaste?: React.ClipboardEventHandler<HTMLInputElement>;
    autoFocus?: boolean;
    type?: string;
    badge?: React.ReactNode | string;
  } & React.InputHTMLAttributes<HTMLInputElement>
>((props, ref) => {
  return (
    <input
      {...props}
      ref={ref}
      className="mt-1 block w-full rounded-md bg-green-800/50 px-3 py-2 outline-none outline-offset-0 focus-visible:outline-green-500"
    />
  );
});

Input.displayName = "Input";

const ManageAccount: NextPage = () => {
  const { isSignedIn, isLoaded: userLoaded, user } = useUser();
  const { register, handleSubmit } = useForm<Inputs>();
  // const router = useRouter();

  if (!userLoaded)
    return (
      <main>
        <Navbar />
        <LoadingPage />
      </main>
    );
  if (!isSignedIn) return null;

  // eslint-disable-next-line @typescript-eslint/no-empty-function
  const onSubmit: SubmitHandler<Inputs> = async ({ displayName }) => {
    try {
      await user.update({ firstName: displayName });
      toast.success("Successfully updated your profile!");
    } catch {
      toast.error("An error occured. Try again later.");
    }
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Navbar />
        <form
          // eslint-disable-next-line @typescript-eslint/no-misused-promises
          onSubmit={handleSubmit(onSubmit)}
          noValidate
          className="items-flex flex flex-col items-center justify-center p-4"
        >
          <div className="grid w-full grid-cols-1 gap-6 md:max-w-lg">
            <label className="block">
              <span className="text-xs">Display name</span>
              <Input
                {...register("displayName")}
                defaultValue={user.firstName ?? ""}
              />
            </label>
            <Link
              href="/account/manage/other"
              className="transition-colros flex items-center duration-100 hover:text-green-500"
            >
              Change other settings <MdNavigateNext />
            </Link>
          </div>
          <button
            type="submit"
            className="mt-6 rounded-lg bg-green-600 px-3 py-1 text-sm hover:bg-green-700"
          >
            Submit
          </button>
        </form>
      </main>
    </>
  );
};

export default ManageAccount;
